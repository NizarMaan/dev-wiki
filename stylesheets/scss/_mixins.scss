// Mixins
// + + + + + + + + + + + + + + + + + + + + + + + + + + +

// -- Mixins for common patterns, utility and compatability -- //

@mixin background-rgba($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  background-color: transparent9;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
  zoom: 1;
}

@mixin button ($point) {
  // Variables
  $background: $color_brand;
  $font-color: #fff;
  $hover-bg: $color_brand-dark;
  $hover-font-color: #fff;
  $btn-padding: 6px 12px 4px 12px;
  @if $point == primary {
    $background: $color_brand;
    $font-color: #fff;
    $hover-bg: $color_brand-dark;
    $hover-font-color: $font-color;
  }
  @else if $point == light {
    $background: $base_neutral_lighter;
    $font-color: $color_brand;
    $hover-bg: $color_brand_light;
    $hover-font-color: #fff;
  }
  @else {
    $background: $base_neutral_light;
    $font-color: #fff;
    $hover-bg: $base_neutral_med;
    $hover-font-color: $font-color;
  }
  @include border-radius(0px);
  @include inline-block();
  background-color: $background;
  border: none;
  color: $font-color;
  cursor: pointer;
  font-family: $font_family_secondary;
  font-weight: 400;
  padding: $btn-padding;
  text-indent: 0;
  text-decoration: none;
  text-transform: uppercase;
  &:hover,
  &:focus {
    background-color: $hover-bg;
    color: $hover-font-color;
    text-decoration: none;
  }
}

// Responsive Breakpoints
@mixin breakpoint($point) {
  @if $point == mobile {
    @media only screen and (max-width: $screen-phone) { @content; }
  }
  @if $point == mobilelandscape {
    @media only screen and (max-width: $screen-phone) and (orientation : landscape) { @content; }
  }
  @if $point == mobilemin {
    @media only screen and (min-width: $screen-phone + 1) { @content; }
  }
  @if $point == tablet {
    @media only screen and (max-width: $screen-tablet) { @content; }
  }
  @if $point == tabletlandscape {
    @media only screen and (max-width: $screen-tablet-landscape) and (orientation : landscape) { @content; }
  }
  @if $point == tabletmin {
    @media only screen and (min-width: $screen-tablet + 1) { @content; }
  }
  @if $point == tabletonly {
    @media only screen and (min-width: $screen-phone + 1) and (max-width: $screen-tablet) { @content; }
  }
  @if $point == desktop {
    @media only screen and (max-width: $screen-desktop) { @content; }
  }
  @if $point == desktoponly {
    @media only screen and (min-width: $screen-tablet + 1) and (max-width: $screen-desktop) { @content; }
  }
  @if $point == large {
    @media only screen and (min-width: $screen-desktop + 1) { @content; }
  }
  @else {
    @media only screen and (max-width: $point) { @content; }
  }
}

@mixin clearfix {
  zoom: 1;  // Triggering "hasLayout" in IE
  &:before,
  &:after {
    content: ".";
    display: block;
    height: 0;
    overflow: hidden;
    visibility: hidden;
  } // before/after
  &:after {
    clear: both;
  }
} // @mixin clearfix

@mixin clearlist {
  list-style-image: none;
  list-style-position: outside;
  list-style-type: none;
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin container {
  @include padded(desktop);
  position: relative;
  max-width: $screen-mdr - 100;
  margin-left: auto !important;
  margin-right: auto !important;
  @include breakpoint(tablet){
    @include padded(narrow);
  }
}

@mixin container-reset {
  padding-left: 0;
  padding-right: 0;
  max-width: none;
  margin: 0;
  @include breakpoint(tablet) {
    padding-left: 0;
    padding-right: 0;
  }
}

@mixin font_size($size) {
  font-size: $size+px;
  font-size: $size/10+rem;
} // @mixin font_size

@mixin font_weight($weight) {
  @if $weight == normal {
    font-weight: normal;
    font-weight: $font_weight-normal;
  } @else if $weight == bold {
    font-weight: bolder;
    font-weight: $font_weight-bold;
  } @else if $weight == light {
    font-weight: 100;
    font-weight: $font_weight-light;
  } @else {
    font-weight: $weight;
  }
} // @mixin font_weight

@mixin hover_focus_underline {
	text-decoration: none;
	&:hover,
	&:focus {
		text-decoration: underline;
	} // hover, focus
} // @mixin hover_focus_underline

@mixin inline_block {
  display: inline-block;
  zoom: 1;
  *display: inline;
} // @mixin inline-block

@mixin invisible {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 0px;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin no_list {
  list-style-image: none;
  list-style-position: inside;
  list-style-type: none !important;
  list-style: none;
} // @mixin nolist

@mixin no_spacing {
  margin: 0;
  padding: 0;
}

@mixin padded($point: full) {
  @if $point == reset {
    max-width: none;
    padding-left: 0;
    padding-right: 0;
    @include breakpoint(tablet) {
      padding-left: 0;
      padding-right: 0;
    }
  }
  @else if $point == full {
    max-width: $screen-md;
    margin-left: auto;
    margin-right: auto;
    padding-left: 60px;
    padding-right: 60px;
    position: relative;
    @include breakpoint(tablet) {
      padding-left: 20px;
      padding-right: 20px;
    }
  }
}

@mixin placeholder ($color: $font_color-light, $size: inherit, $family: $font_family-default) {
  &::-webkit-input-placeholder {
      color: $color !important;
      font-family: $family !important;
      font-size: $size !important;
      font-weight: 200;
      letter-spacing: 0.5px;
  }
  &:-moz-placeholder {
      color: $color !important;
      font-family: $family !important;
      font-size: $size !important;
      font-weight: 200;
      letter-spacing: 0.5px;
  }
  &::-moz-placeholder {
      color: $color !important;
      font-family: $family !important;
      font-size: $size !important;
      font-weight: 200;
      letter-spacing: 0.5px;
  }
  &:-ms-input-placeholder {
      color: $color !important;
      font-family: $family !important;
      font-size: $size !important;
      font-weight: 200;
      letter-spacing: 0.5px;
  }
}

@mixin responsive_image {
  max-width: 100%;
  height: auto;
  .ie8 & {
    width: auto;
  } // ie8
} // @mixin responsive_image

@mixin vertical-gradient($top, $bottom) {
  @if lightness($top) > lightness($bottom) {
    background-color: darken($top, 5%);
  } @else {
    background-color: lighten($top, 5%);
  }
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#{$top}, endColorstr=#{$bottom});
  background: -ms-linear-gradient(top, $top 0%, $bottom 100%);
  background: -moz-linear-gradient(top, $top 0%, $bottom 100%);
  background: -o-linear-gradient(top, $top 0%, $bottom 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0, $top), color-stop(1, $bottom));
  background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
  background: linear-gradient(to bottom, $top 0%, $bottom 100%);
}

@mixin mobile_block_title($bgcolor: $color_brand) {
  @media screen and (max-width: $screen-sm-min) {
    position: relative;
    background: $bgcolor;
    width: 83% !important;
    padding: 20px 0 40px 40px !important;
    margin-left: -20px;
    text-align: left;
    @include font_size(14);
    &:before {
      content: '';
      position: absolute;
      bottom: 0; right: 0;
      border-bottom: 50px solid white;
      border-left: 50px solid $bgcolor;
      width: 0;
    }
  }
}
